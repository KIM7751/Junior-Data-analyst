# 선형대수에서 다루는 데이터는 개수나 형태에 따라 크게 스칼라(scalar), 벡터(vector), 행렬(matrix), 텐서(tensor) 유형으로 나뉨

# 스칼라 : 숫자 하나로 이루어진 데이터

	보통 x와 같이 알파벳 소문자로 표기하며 실수(real number)인 숫자 중의 하나이므로 실수 집합 R의 원소라는 의미에서 다음처럼 표기
	 
	x∈R

# 벡터 : 여러 숫자로 이루어진 데이터 레코드(data record), 여러 개의 숫자가 특정한 순서대로 모여 있는 것을 의미

           붗꽃을 예를들면 꽃받침의 길이 x₁, 꽃받침의 폭 x₂ 꽃잎의 길이 x₃, 꽃잎의 폭 x₄ 4개의 숫자를 측정할 수 있음, 이렇게 측정된 4개의 숫자는 한 송이의 붓꽃에서 나온 데이터이므로 하나의 묶음(tuple)으로 묶어 놓는 것이 좋음

           숫자의 순서 유지하는 것이 중요

           붓꽃의 크기 벡터는 4개의 데이터 (x₁,x₂,x₃,x₄)가 하나로 묶여 있는데 이를 선형대수 기호로는 하나의 문자 x로 표기

           벡터는 복수의 가로줄, 즉 **행(row)**을 가지고 하나의 세로줄, 즉 **열(column)**을 가지는 형태로 위에서 아래로 내려써서 표기

           하나의 벡터를 이루는 데이터의 개수가 n개이면 이 벡터를 n-차원 벡터(n-dimensional vector)라고 표기

	x∈Rⁿ

※ 넘파이를 사용한 벡터 표현

           넘파이는 선형대수 문제를 풀 때 사용하는 파이썬 패키지

           넘파이를 사용하여 벡터를 표현할 때는 벡터를 다음처럼 열의 개수가 하나인 2차원 배열(array) 객체로 표현

	x1 = np.array([[5.1], [3.5], [1.4], [0.2]])
	x1
	
	array([[5.1],
       	         [3.5],
       	         [1.4],
       	         [0.2]])

           이때 배열의 차원은 벡터의 차원과 다른 의미

           위에서 설명한 벡터의 차원은 원소 개수를 뜻함
   
           배열은 원소 개수가 몇 개이든 한 줄로 나타낼 수 있다면 1차원 배열(1-dimensional array), 

           원소를 가로와 세로가 있는 여러 줄의 직사각형 형태로 나타낼 수 있으면 2차원 배열(2-dimensional array)이라고 함


※ 넘파이는 1차원 배열 객체도 대부분 벡터로 인정, 벡터가 마치 하나의 행처럼 표시되어도 실제로는 열이라는 점에 주의

	x1 = np.array([5.1, 3.5, 1.4, 0.2])
	x1

	array([5.1, 3.5, 1.4, 0.2])
	
	사이킷런 패키지에서 벡터를 요구하는 경우에는 반드시 열의 개수가 1개인 2차원 배열 객체를 넣어야 함
	

# 행렬 : 이러한 벡터, 즉 데이터 레코드가 여럿인 데이터 집합 


# 텐서 : 같은 크기의 행렬이 여러개 있는 것 

--------------------------------------------------------------------------------------------------------------------------

벡터의 합

 ->                ->
 a   = [ 6         b  =  [ -4       -  2차원 벡터 a, b 두 개가 있음
         -2 ]                  4 ]                


 ->    ->
 a  +  b  =  [ 2                                 
                  2 ]                     
			   

- 합을 어떻게 정의할 수 있을지 한 번 생각해보면 둘다 두 값을 가진 2차원 벡터이므로 대응하는 값을 서로 더하면 될 것임

- 실수좌표공간에서 생각해보면 둘 다 R² 벡터, 2-튜플 벡터임 

- 시각적으로 확인할 때 벡터의 꼬리를 꼭 원점(0, 0)에 둘 필요는 없지만 편의성을 고려해서 둠

- 중요한 것은 오직 크기와 방향뿐이므로 그래프 상에 같은 벡터를 그려 넣을 수 있음

- (6, -2) + (-4, 4) = (2, 2) 라는 결론을 도출 할 수 있고 그림으로 그려 볼 수 있음

- (6, -2)의 끝지점(>)에, (-4, 4)의 시작점(-)으로 놓고 그림을 그렸을때

- (-4, 4)의 끝지점과 (6, -2) 시작점을 이을 수 있는 선이 하나 나오는데 바로 (2, 2) 임


ex) (-4, -3) + (3, 5) = (-1, 2) 

ex) (-4, -3) + (3, 5) + (6, 2) + (-4, 4) = (1, 8)

∴ 2차원 벡터의 합을 이루는 항과 결과 값은 모두 이어짐

 