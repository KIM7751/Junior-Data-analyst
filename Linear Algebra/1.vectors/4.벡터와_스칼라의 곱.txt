# 선형대수에서 다루는 데이터는 개수나 형태에 따라 크게 스칼라(scalar), 벡터(vector), 행렬(matrix), 텐서(tensor) 유형으로 나뉨

# 스칼라 : 숫자 하나로 이루어진 데이터

	보통 x와 같이 알파벳 소문자로 표기하며 실수(real number)인 숫자 중의 하나이므로 실수 집합 R의 원소라는 의미에서 다음처럼 표기
	 
	x∈R

# 벡터 : 여러 숫자로 이루어진 데이터 레코드(data record), 여러 개의 숫자가 특정한 순서대로 모여 있는 것을 의미

           붗꽃을 예를들면 꽃받침의 길이 x₁, 꽃받침의 폭 x₂ 꽃잎의 길이 x₃, 꽃잎의 폭 x₄ 4개의 숫자를 측정할 수 있음, 이렇게 측정된 4개의 숫자는 한 송이의 붓꽃에서 나온 데이터이므로 하나의 묶음(tuple)으로 묶어 놓는 것이 좋음

           숫자의 순서 유지하는 것이 중요

           붓꽃의 크기 벡터는 4개의 데이터 (x₁,x₂,x₃,x₄)가 하나로 묶여 있는데 이를 선형대수 기호로는 하나의 문자 x로 표기

           벡터는 복수의 가로줄, 즉 **행(row)**을 가지고 하나의 세로줄, 즉 **열(column)**을 가지는 형태로 위에서 아래로 내려써서 표기

           하나의 벡터를 이루는 데이터의 개수가 n개이면 이 벡터를 n-차원 벡터(n-dimensional vector)라고 표기

	x∈Rⁿ

※ 넘파이를 사용한 벡터 표현

           넘파이는 선형대수 문제를 풀 때 사용하는 파이썬 패키지

           넘파이를 사용하여 벡터를 표현할 때는 벡터를 다음처럼 열의 개수가 하나인 2차원 배열(array) 객체로 표현

	x1 = np.array([[5.1], [3.5], [1.4], [0.2]])
	x1
	
	array([[5.1],
       	         [3.5],
       	         [1.4],
       	         [0.2]])

           이때 배열의 차원은 벡터의 차원과 다른 의미

           위에서 설명한 벡터의 차원은 원소 개수를 뜻함
   
           배열은 원소 개수가 몇 개이든 한 줄로 나타낼 수 있다면 1차원 배열(1-dimensional array), 

           원소를 가로와 세로가 있는 여러 줄의 직사각형 형태로 나타낼 수 있으면 2차원 배열(2-dimensional array)이라고 함


※ 넘파이는 1차원 배열 객체도 대부분 벡터로 인정, 벡터가 마치 하나의 행처럼 표시되어도 실제로는 열이라는 점에 주의

	x1 = np.array([5.1, 3.5, 1.4, 0.2])
	x1

	array([5.1, 3.5, 1.4, 0.2])
	
	사이킷런 패키지에서 벡터를 요구하는 경우에는 반드시 열의 개수가 1개인 2차원 배열 객체를 넣어야 함
	

# 행렬 : 이러한 벡터, 즉 데이터 레코드가 여럿인 데이터 집합 


# 텐서 : 같은 크기의 행렬이 여러개 있는 것 

--------------------------------------------------------------------------------------------------------------------------

벡터와 스칼라의 곱

 ->
 a     = [ 2            - (2, 1)의 벡터 a가 있다
            1 ]           - 수평으로 2만큼 수직으로 1만큼 움직이는 선을 그릴 수 있음

 ->
3a = 3 [ 2             - 3은 그저 숫자로 스칼라가 어떤 의미인지 벡터와 비교해보자
           1 ]            - 벡터는 얼마만큼 어느방향으로 움직여야하는지 크기와 방향을 둘 다 알려줌
	             - 각 성분에 3을 곱함

 ->
3a = [ 6		- 2차원 벡터 (6, 3)이 됨
         3 ]              - 수평으로 6만큼 수직으로 3만큼 움직이는 선을 그릴 수 있음
	             - 바뀌지 않은점 : 여전히 같은 방향을 가리키고 있음 / 바뀐점 : 크기가 확대됨(3배)
		- 벡터의 스칼라 곱은 우리가 정의한 바에 의하면 크기는 바뀌고 방향은 바뀌지 않음
		- 스칼라(scalar)와 확대하다(scale up)의 어원이 같음을 눈치 챌 수 있음
		- 스칼라의 곱은 벡터를 확대


 ->
-2a = [ -4              - 2차원 벡터 (-4, -2)가 됨
          -2 ]	- 수평으로 -4만큼 수직으로 -2만큼 움직이는 선을 그릴 수 있음
		- 음수를 곱하니 방향이 완전히 뒤집힘
		- 마이너스 부호가 벡터의 방향을 뒤집고 2가 벡터의 크기를 확대함(2배)
