기영이의 파이썬 코드 사전

- 딕셔너리: 짝궁이 있는 자료형

   1. 중괄호{}로 묶어서 표현

   dict_zero ={key : value}: key(열쇠처럼 꺼낼 수 있는 도구)를 알면 value(딕셔너리에서 key로 빼낸 자료)를 알 수 있음

   person = {'name' : 'Michael' ,'age' : 10}



   [In] person['name'] , person['age']
         (dic)    (key)

   [out] 'Michael' , 10
            (value)


   2. 자료 추가

   person['hometown'] = 'seoul

   person = {'name' : 'Michael' ,'age' : 10, 'hometown' : 'seoul'}



   3. del을 이용한 원소 삭제

   del person['age']

   person = {'name' : 'Michael', 'hometown' : 'seoul'}

   
    4. key는 변할 수 없는 자료형 => 리스트는 안되고 튜플은 된다(= 튜플은 변하지 않는 자료형이다)

    datas = {[1, 2, 3] : 'Alphabet'} # Error

    datas = {(1, 2, 3) : 'Alphabet'} # Ok

-------------------------------------------------------------------------------------------------------------------------------
- 문자열 + 리스트 + 튜플.... = 시퀀스 자료형: 순서가 있는 자료형

   1. 원소간의 순서가 존재 = 인덱스, 슬라이싱이 가능

   [In] a = 'once'
        b = [ 't', 'w', 'i', 'c', 'e']

   [out] a[1] = n , a[-1]  = e
          b[2:4] = ['i', 'c'] , b[:2] = ['t', 'w']
         
          문자열 슬라이싱 -> 문자열, 리스트 슬라이싱 -> 리스트

   2. 멤버 조회 가능

   [In] 'o' in a 

   [out] True  

   3. 길이 확인 가능

   [In] len(a)

   [out] 4

   4. 연결 연산 = '+' 연산자로 같은 시퀀스 두개를 이어 붙일 수 있음

   [In] ['t', 'w'] + ['o']

   [out] ['t', 'w', 'o']

   5. 반복 연산 = '*' 연산자로 시퀀스 반복 가능

   [In] 'shy' * 3

   [out] shyshyshy

-------------------------------------------------------------------------------------------------------------------------------

- '=' 컴퓨터 메모리 일부분 변수를 만들어 대입을 의미  


- '==' 같다를 의미


- not 논리 값을 뒤집는다
  
  [In] print(not 3 == 4)

  [Out] True

-------------------------------------------------------------------------------------------------------------------------------

OS 

- operating system의 약자로 운영체제에서 제공되는 여러 기능을 파이썬에서 수행 가능

- 파이썬을 이용해 파일을 복사, 디렉터리 생성, 특정 디렉터리 내의 파일 목록 구성을 구하고자 할 때 이용

- os.getcwd( ) : 현재 경로를 얻을 수 있음
  
- os.listdir( 경로 ) : 특정 경로에 존재하는 파일과 디렉터리 목록을 구함

-------------------------------------------------------------------------------------------------------------------------------
반복문

- for문 어떠한 조건이나, 범위 내에서 어떠한 명령을 반복적으로 수행하는 것
 
  for 변수 in 시퀀스:        ->  시퀀스의 원소를 하나씩 변수에 넣어가면서 명령 실행
  <수행할 명령> 
 
  for 변수 in range(a, b):   ->  a이상 b미만의 수를 변수에 넣어가면서 명령을 수행
   <수행할 명령> 


- enumerate 반복문 사용 시 몇 번째 반복문인지 확인이 필요할 때 사용, 인덱스 번호와 컬렉션의 원소를 tuple형태로 반환

   [In] arr = [ 4, 54, 52, 1, 21]

       for index, i in enumerate(arr):
  	 print(f " { index } : { i } ")

   [out] 
	0: 4
	1: 54
	2: 52
	3: 1
	4: 21


- range(a, b) : a 이상 b 미만의 연속된 정수가 담긴 시퀀스를 만들어주는 함수



- range(a) : a번 반복



- list.append( i ): 리스트 마지막 원소 뒤에 추가, 오직 한 개의 자료만 넣을 수 있음

   [In] a = [1]
        
        for i in range(2, 4):
	 a.append(i)
        
        print(a)

   [out] [1, 2, 3]  

- list.insert( i, d ): 인덱스 i에 자료 d를 추가, 오직 한 개의 자료만 넣을 수 있음

   [In] c = [1, 2, 4, 5]
        c.insert(2, 3)

   [out] [1, 2, 3, 4, 5]

- list.remove( d ): 처음 나오는 자료 d를 제거(=중복시 인덱스가 작은 원소 제거)

   [In] d = [3, 1, 2, 3]
        d.remove(3)

   [out] [1, 2, 3]

- list.

-------------------------------------------------------------------------------------------------------------------------------


- print("출력할 내용"): 하나가 아닌 여러자료를 출력할 땐 ,(콤마)를 이용해서 여러 자료를 출력할 수 있음
 
  [In] print(3, 'Hellow!') 

  [Out] 3 Hellow

  [In] print( [50] +[50] ) 
 
  [Out] [50, 50]


-------------------------------------------------------------------------------------------------------------------------------

문자열 

- f - string : 문자열에서 특정 부분만 바꾸고 나머지 부분은 일정하다고 할 때 문자열 포매팅을 이용해 예쁘게 출력 가능
                
   %포매팅과 str.format 방법보다 더 최근에 나온 것

   f ' 문자열 {변수} 문자열 '

   [In] lenth = 5
        print( f '총 페이지수는 {lenth}입니다.' )

   [Out] 총 페이지수는 5입니다.

- find(변수) : 변수 안에 문자열의 구성요소를 검색함, 있으면 있는 문자열 위치를 반환하고 없으면 -1을 반환함

   tt = 'a aa'

   [In] tt.find(' ')

   [Out] 1



- . join( ) : 리스트를 특정 구분자로 포함해 문자열로 변환
 
   lst = ['국어', '수학', '정보', '영어', '체육']

   # 쉼표로 구분하여 문자열로 결합하기

   s = " , ". join(lst)

   print(s)

   [Out] 국어, 수학, 정보, 영어, 체육

-------------------------------------------------------------------------------------------------------------------------------

정규 표현식

- 특정한 규칙을 가진 문자열 패턴을 사용하는 방식


- 데이터 전처리에 있어서 텍스트에서 특정 문자열 검색, 치환, 제거할 때 사용


- 정규식에서는 숫자를 의미하는 기호로 \d를 사용(메타 문자라고 하고 파이썬 예약어 for, int와 비슷하다고 생각하자)


- re.sub('찾을 패턴', '찾은 패턴을 변경할 내용', '원본') : 주어진 문자열(찾을 패턴)에서 일치하는 모든 패턴을 (변경할 내용으로)바꿈
					        두번째 인자는 특정 문자열이거나 함수가 될 수도 있음
        
    [ ] 매타캐릭터 : [ ]안에 들어있는 캐릭터 자체를 나타내며 [abc] : a 또는 b 또는 c

    - : 해당 문자 사이 범위에 속하는 문자 중 하나 [a-d] : a 또는 b 또는 c 또는 d

    ^ : 맨 앞에 사용될 경우에만 해당 문자 패턴이 아닌 것과 매칭 [^a-d] : a 그리고 b 그리고 c 그리고 d 가 아닌 문자열

    text = '010-1234-13*2!1%$^'

    [In] re.sub(r'[%$^*!]', '', text)
    
    [Out] '010-1234-1321'


- re.compile('패턴') : 정규식 객체를 리턴해 줌

   [In] target_list = re.compile('\d{4}\w\w\d+').finditer(txt) 

        패턴{n} = 앞 패턴이 n번 반복해서 나타나는 경우

        패턴{n, m} = 앞 패턴이 최소 n번, 최대 m번 반복해서 나타나는 경우

        \d = [0-9]    |    \D = [^0-9]
    
        \s = [\t \n \r \f \v] 모든 공백 문자와 일치    |    \S = [^\t \n \r \f \v] 모든 비 공백 문자와 일치

        \w = [a-zA-Z0-9_] 모든 영숫자와 일치   |   \W = [^a-zA-Z0-9_] 모든 비 영숫자와 일치 

-------------------------------------------------------------------------------------------------------------------------------