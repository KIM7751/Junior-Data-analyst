JavaScript 입문

1. HTML을 이용해서 웹페이지를 만든 후에, JavaScript를 이용해 사용자와 상호작용할 수 있도록 기능을 추가

2. HTML이 정보라는 멈춰 있는 이미지를 그리는 것이라면 JavaScript는 그 이미지를 영화처럼 움직이게 함

3. JavaScript 최종 목표를 주간, 야간 모드로 전환이 가능하도록 만들 것임

4. <input type = "button" value = "night" 타입과 벨류를 이렇게 작성했을때 night라는 버튼이 생김

5. <input type = "button" value = "night" onclick " ~ " 온클릭이라는 속성의 값은 자바스크립트가 와야한다는 규칙이 있음

6. 온클릭은 해당 버튼을 클릭했을 때 JavaScript 코드를 실행시킬 것입니다라고 이야기할 수 있음

7. 정리하자면 JavaScript는 사용자와 상호작용하는 언어이다, 웹브라우저는 한번 화면에 출력되면 자기자신을 바꿀 수 없다

8. JavaScript를 이용하면 JavaScript 코드에 따라 정적인 부분을 개선할 수 있음

------------------------------------------------------------------------------------------------

HTML과 JavaScript의 만남1 (script tag)

1. 기본적으로 JavaScript는 HTML 위에서 동작하는 언어임

2. 어떻게 하면 HTML이라는 컴퓨터 언어에 완전히 다른 문법을 가진 JavaScript를 넣을까?

3. JavaScript를 넣는 방법은 우선 웹브라우저한테 HTML의 코드로 지금부터 JavaScript가 시작됩니다라고 알려줘야함

4. <script> tag 안쪽에 JavaScript가 오도록 약속되어 있기 때문에 안쪽에 있는 코드를 JavaScript로 해석함

5. <script> document.write('hello world'); 화면 출력됨을 알 수 있음

6. hello word를 직접 작성해서 화면 출력하는 것과 어떤 부분에서 차이가 나는지 의문이 듦

7. 차이가 확연히 나게하는 방법으로는 1+1을 입력해보면 되는데 직접 작성했을 때 1+1이 정적인 상태로 그대로 출력됨

8. 하지만 JavaScript로 작성한 1+1은 계산기와 같은 결과값으로 2라는 출력값을 보임

9. 웹페이지에 JavaScript를 글씨로 출력할 때는 document.write를 쓴다고 알아두자

------------------------------------------------------------------------------------------------

HTML과 JavaScript의 만남2 (event)

1. 이벤트는 자바스크립트가 사용자와 상호작용하는데 핵심적인 역할을 할 것

2. 기본 html 구성 요소를 작성해주고 <body> tag에 hi라는 버튼을 만들 것임

3. <input type = "button" value = "hi">

4. hi라는 것을 눌렀을 때 경고창을 뜨게 하고 싶음

5. 자바스크립트에서 경고창은 alert이라고 어제 별도 강의 API 수업 중에 배웠던 기능임

6. <input type = "button" value = "hi" onclick = "alert('hi')">

7. 첫번째, 온클릭이라는 속성의 값은 자바스크립트가 와야한다는 규칙이 있었음을 이전에 언급함 

8. 두번째, 온클릭 속성의 속성 값은 웹브라우저가 기억하고 있다가 온클릭 속성이 위치하고 있는 tag의 UI를 사용자가 눌렀을때

9. JS코드를 JS 문법에 따라 해석해 적혀있는데로 웹 브라우저가 동작함

10. 이렇게 웹브라우저에 위에서 일어나는 일들을 "이벤트" 라고 함

11. 어떤 이벤트가 일어났을 때 어떤 JS가 실행되도록 하는 것이 바로 "온클릭"인 것

12. 웹브라우저에 일어날 수 있는 이벤트는 얼마나 있을까?

13. 웹브라우저는 웹브라우저 위에서 일어나는 여러 사건 중에 기념할 만한 것 10 ~ 20개를 정의

14. 우리는 그 이벤트를 이용해 사용자와 상호작용하는 웹페이지 웹사이트를 만들 수 있음

15. 키를 눌렀을 때 이벤트창을 뜨게 하고 싶어 javascript keydown event attribute 검색해보면

16. <input type = "text" onkeydown = "alert('key down!')"> 검색 결과로 해당 코드를 작성할 수 있음

17. 이번 시간에 배운 주인공들은 on으로 시작하는 속성들이었고, 이런 속성들을 이벤트라고 함

18. 웹브라우저 위에서 일어나는 여러가지 사건들이 있는데 그 중에 사용자에게 유용할만한 이벤트 10 ~ 20개를 정리해 놓은 것임

------------------------------------------------------------------------------------------------

HTML과 JavaScript의 만남3 (console)

1. 우리는 경우에 따라서 꼭 파일이 아니더라도 어떤 코드를 실행해야하는 상황이 있음

2. 그런 경우엔 F12 페이지 소스보기에서 콘솔이라는 것을 찾아볼 수 있음

3. 콘솔이라는 것을 이용하면 파일을 만들지 않고도 자바스크립트를 실행할 수 있음

4. 예를 들어 우리가 만든 3.html 본문 내용의 글자 수를 알고 싶을 때 본문을 콘솔창에 복붙하여 따옴표를 붙여 str 처리 함

5. 자바스크립트 문자열의 개수를 알려주는 명령인 .length를 입력하고 이전 시간에 배웠던 팝업창을 띄워주는 alert을 씌워줌 

6. alert("~ 본문 ~".length)

7. 3.html 에 작성되어있는 텍스트는 총 1,445개임을 팝업창에서 알 수 있고 이렇게 페이지를 따로 만들어 실행하는게 아닌 콘솔창에서 실용적으로 활용이 가능함

8. 콘솔창을 이용해 실행시키는 자바스크립트는 웹페이지를 대상으로 실행된다고 보면됨

9. 쉬운 이해를 돕기 위한 예를 들자면 페이스북 페이지 댓글 추첨을 진행한다고 가정을 해보자

10. 페이지 소스보기를 눌러 댓글에 해당하는 태그를 콘솔에 복붙하여 랜덤 추첨하는 코드를 작성하면 추첨 대상 이름이 출력됨을 볼 수 있음

11. 이미 만들어져있는 홈페이지를 나의 필요에 따라서 맥락적으로 간단하면서도 나에게 딱 맞는 코드를 작성해서 문제 해결이 가능하다는 이야기임 

------------------------------------------------------------------------------------------------

JavaScript 데이터 타입

1. 자바스크립에는 어떤 데이터 타입(=자료형)이 있는지 알아보자

2. 검색해봤을 때 6개의 데이터 타입과 객체가 나오는데 이번 시간에 알아볼 자료형은 문자열과 숫자임

3. 홈페이지 관리자도구를 누르고 콘솔창에 숫자를 입력하면 출력, 연산이 되는 것을 알 수 있음

4. 산술 연산자로 대표적인 사칙연산 '-', '+', '/', '*' 모두 이용 가능함

5. 문자열은 작은 따옴표, 큰 따옴표를 활용해 입력하면 문자열로 출력 가능함, 따옴표가 없을 땐 에러 발생

6. 문자열에는 유용한 기능이 있는데 대표적으로 글씨의 개수를 알려주는 .length 같은 메서드가 있음

7. 그 밖에도 javascript string property를 검색하면 문자열과 관련된 여러 기능들을 알 수 있음

------------------------------------------------------------------------------------------------

변수와 대입연산자

1. 변수는 바뀔 수 있는 값을 의미(variable)

2. 대입 연산자는 오른쪽 항의 값을 왼쪽의 변수에 대입한다는 의미로 "=", 같다(equal)에 의미가 아님

3. 숫자에 대입 연산자를 넣어 1 = 2 라고 작성하면 오류가 발생함

4. 항상 숫자 1이기 때문에 오류가 발생하는 것, 우리는 이것을 "항상 상"을 넣어 상수라고 함(constant)

5. 변수를 왜 쓰는가? 많이 쓰기 때문에 한가지 콕 찝어서 이야기하긴 어려움

6. 프로그래밍에서 예제로 변수의 힘을 느낄 수 있는 예제를 만들어보고자 함

7. 아무런 의미 없는 내용의 글이 작성되어 있고 "김기영"이라는 단어가 1억개 들어있다고 가정

8. 처음 실행할 때는 별 문제가 되지 않지만 이 글을 바꿔야하고 "김기영"이라는 이름을 다른 이름으로 바꾸려고함

9. 1억개를 고쳐야하는데 쉽지 않음, 이때 변수를 사용함

10. name = '김기영'; shift + enter, 본문을 복붙해서 바뀔 수 있는 부분을 변수화 시킴 "+name+"(변수 처리)

11. 이렇게 처리한 부분이 1억개라고 했을 때 모든 내용이 "김기영"이며 수정할 때도 변수 name="~"만 수정해 주면됨

12. 자바스크립트 관용상 변수를 작성할 때 var name = "kim"맨 앞에 var을 붙이는게 좋은 습관 

------------------------------------------------------------------------------------------------

웹 페이지 제어

1. 자바스크립트를 통해 할 수 있는 일 중의 하나인 웹브라우저 제어를 위한 테크닉을 알아보자

2. 최종적으로 우리가 원하는 결과물은 night 버튼을 눌렀을 때 검정색으로 바꾸고 싶음

3. body 태그는 웹 페이지 전반을 감싸는 큰 태그로 안에 style이라는 속성을 쓰고 그 안에 CSS 언어가 오도록 약속됨

4. <body style="background-color:black; color:white;> 바탕은 검정색, 글씨는 햐얀색으로 전환

5. HTML은 이렇게 코드를 수정하면 원하는 결과물을 출력할 수 있지만 언제나 이와 같은 결과물이 출력될 것 

6. 즉 HTML은 한번 화면에 표시되면 자기를 바꿀 능력이 없는 정적인 언어임

7. 하지만 자바스크립트를 이용하면 night/day 버튼을 클릭했을 때 마다 body 태그 안의 속성이 유기적으로 바뀜

8. 이를 구현하기 위해선 첫번째로 style에 들어가는 속성의 값 CSS

9. 두번째로 CSS 속성을 주고자하는 태그가 누구인지 웹 브라우저에 알려주는 자바스크립트 문법을 알아야함 

------------------------------------------------------------------------------------------------

제어할 태그 선택하기 

1. 우리가 달성해야할 목표는 주/야간 모드를 전환하는 프로세스임

2. 이 목적을 지금 부터 달성하기 위해 접근해보고자 함

3. 버튼부터 만들어보자

	<input type="button" value="day">

	<input type="button" value="night">

4. 버튼을 클릭했을 때 이벤트가 필요한데 onclick에 JS 코드를 넣으면 됨

5. 구체적으로 버튼을 클릭했을 때 body 태그의 style 속성을 동적으로, 프로그래밍적으로, 상호작용에 의해 넣으려함

6. JS 문법에 따라 웹 브라우저에게 body를 선택하게 끔 해야함

7. javascript select tag by css selector 검색, css 선택자는 크게 세 가지 class, id, tag 선택자가 있음

	document.querySelector ~ 

8. query는 웹 브라우저에 질의한다라고 이해하면 쉬움 
	
9. 우리가 발생 시킬 이벤트가 해당하는 태그가 body이므로 태그 선택자 "body"삽입

	document.querySelector("body")

10. 다음 과제는 우리가 body 태그의 style 속성을 어떻게 JS로 넣을 수 있는가 알아봐야함

11. javascript elemety style 검색 

	style = element.style

	document.querySelector("body").style

12. javascript style back ground 검색

	<~ style = "background-color:black;">

	document.body.style.backgroundColor = "black";

13. 위에서 확인할 수 있는 점으로 css 문법과 js 문법간에 표기 방법 또한 다른것을 확인할 수 있음

14. 이번 시간에는 제어할 태그를 선택하는 JS문법에 대해서 배움

------------------------------------------------------------------------------------------------

프로그램, 프로그래밍, 프로그래머

1. HTML, JS는 둘 다 컴퓨터 언어임

2. 하지만 JS는 컴퓨터 프로그래밍 언어라고도 이야기함, HTML은 프로그래밍 언어가 아님 

3. 프로그램이라는 말에는 "순서" 라는 의미가 자리 잡고 있음

4. 이 순서를 만드는 행위를 "프로그래밍", 만드는 사람을 "프로그래머" 라고 함

5. 컴퓨터엔 여러가지 기능이 있고 어떤 의도에 따라 순서대로 여러 기능을 작동시키는 것이 컴퓨터를 사용하는 일반적인 방법임

6. 순서대로 컴퓨터를 조작하면 좋겠지만 이 순서가 반복되고 그 과정에서 시간이 많이 걸리고 실수를 자주 한다면 반복 작업에 회의감을 느낌 

7. 사람들은 이 불행을 "컴퓨터 프로그래밍 언어" 라는 것을 만들며 극복함 

8. 시간의 순서에 따라 실행되어야 할 기능을 프로그래밍 언어의 문법에 맞게 글로 적어두는 방식 고안 

9. 그리고 그 작업을 할 때 적어뒀던 글을 컴퓨터에게 "이걸 실행 해줘"라고 하면 컴퓨터는 그 일을 시행

10. 이것이 프로그램의 본질적인 의미

11. HTML은 웹페이지를 묘사하는 목적의 언어이기 때문에 시간의 순서에 따라서 무엇을 할 필요가 없음

12. 따라서 HTML은 시간의 순서에 따라 실행되는 기능을 갖고 있진 않음 

13. JS는 사용자와 상호작용하기 위해 고안된 컴퓨터 언어이고 그러기 위해선 시간의 순서에 따라 여러 기능이 실행되어야 하기 때문에 프로그래밍이라고 하는 형태를 띠고 있음

14. 이점이 HTML, JS를  구분하는 중요한 특징임

15. 앞서 진행한 JS를 이용한 프로세스가 여러 개의 명령어를 시간의 순서에 따라 배치해 컴퓨터의 기능이 실행 되도록하는 방법을 배운 것임

16. JS를 이용해 body 태그 백그라운드를 검정색으로 한 이후에 텍스트를 하얀색으로 빠꾸는 순서 있는 과정 자체가 프로그래밍이었던 것임 

17. 처음엔 단순히 시간을 나열하는 것 자체에 만족했지만 

18. 조건에 따라 다른 순서의 기능이 실행되게 하거나(조건문)

19. 반복해서 어떤 기능이 실행되도록 하고 싶어진 것임(반복문)

20. 코드가 복잡해지고 순서의 배치가 복잡해진 순서를 단순하게 잘 정리 정돈하는 방법도 차차 고안되기 시작(함수) 

------------------------------------------------------------------------------------------------

조건문 예고

1. 조건문은 하나의 프로그램이 하나의 흐름으로 가는 게 아닌 조건에 따라서 다른 순서의 기능들이 실행되도록 하는 것임 

2. 프로그래밍이라는 것이 제일 중요하고 프로그래밍을 통해 반복적인 일을 하지 않게 되었다면 조건문이라는 것은 단순한 반복문이 아닌 아주 복잡한 업무에서 벗어나게 해주는 도구 

3. 우리가 만들었던 day / night 버튼을 눌러 모드를 바꿨던 예제를 보자

4. 두 개 였던 버튼을 한 개로 바꿔 사용할 순 없을까?

5. 다음 시간에 우리는 조건문 if, 조건문 내용을 구분할 비교 연산자, 비교 연산자를 통해 만들어지는 결과물인 불리언의 개념을 배워보고자함

------------------------------------------------------------------------------------------------

비교 연산자와 불리언

1. ex4.html을 이용해서 실습을 진행함

	<h3>1===1</h3>
              <script>
	 document.write(1===1);      --> true
              </script>

	<h3>1===2</h3>
              <script>
	 document.write(1===2);      --> false
              </script>


2. ===는 비교연산자, 좌항과 우항을 결합해 데이터를 만드는 이항연산자라고 이야기할 수 있음

3. 1===1, 1===2 각각의 비교를 통한 값으로는 true, false를 출력하며 좌항, 우항의 같음을 판단함

4. true, false 이 두가지를 묶어 우리는 boolean(불리언)이라고 부름

5. JS를 배우며 우리는 number, string에 이어 boolean에 대해서 알게 된 것

6. number는 컴퓨터의 한계로 무한히 많진 않지만 무한하다고 봐도 무방함

7. string 또한 인간의 언어만큼 많음

8. boolean은 단 2개의 데이터만 갖고 있는 데이터 타입임

9. boolean으로 인해서 단순 반복에서 해방될 수 있음

10. < 는 html에서 꺽쇠라는 문법으로 사용되고 있어 less than의 줄임말 &lt; 로 표현 

11. > 는 great than의 줄임말 &gt;로 표현

	    <h3>1 &lt; 1</h3>
                 <script>
                  document.write(1<1);
                 </script>

                 <h3>3 &gt; 1</h3>
                 <script>
                  document.write(3>1);
                 </script>    

12. 이 얘기 자체로는 쓸 수 있는게 아무 것도 없지만 조건문, 반복문을 통해 불리언이라는 것이 얼마나 혁명적인 것인지 알 수 있음 

------------------------------------------------------------------------------------------------

조건문 예제

1. ex5.html을 이용해서 실습을 진행
2. html의 기본 세팅(! + tab)후 코드 입력

	<body>

  	<h1>Conditional statements</h1>

  	<h2>Program</h2>

  	<script>

	    document.write("1<br>");

	    document.write("2<br>");

	    document.write("3<br>");

	    document.write("4<br>");

	</script>



  	<h2>IF-true</h2>

  	<script>

	    document.write("1<br>");

	    if(true) {

	    document.write("2<br>");

	    } else {

	    document.write("3<br>");

	    }

	    document.write("4<br>");

	</script>



	<h2>IF-false</h2>

  	<script>

	    document.write("1<br>");

	    if(false) {

	    document.write("2<br>");

	    } else {

	    document.write("3<br>");

	    }

	    document.write("4<br>");

	  </script>

	</body>

3. 웹 페이지를 실행해보면 조건문 불리언 값에 따라 출력된 값이 다르다는 것 확인 가능

4. 즉 if 문 뒤에 따라오는 괄호 안에는 불리언 데이터 타입이 옴

5. true면 첫번재 중괄호에 잇는 녀석들이 실행되고 else 중괄호는 무시

6. false면 첫번째 중괄호는 무시하고 else 중괄호가 실행됨 

7. 우리가 작성한 코드의 조건에는 직접 불리언을 적었기 때문에 쓸모 없는 코드임

8. 이유는 조건에 따라 실행되는 코드가 달라지지 않기 때문임

------------------------------------------------------------------------------------------------

리팩토링

1. factory = 공장, re = 다시

2. 공장으로 다시 보내서 좀 더 개선한다의 느낌으로 접근

3. 코딩을 하다보면 비효율적인 부분이 생기기 마련임

4. 리팩토링 = 동작하는 것은 그대로, 코드 자체를 아주 효율적으로 만들어 코드의 가독성을 높여 유지 보수 하기 편하게 만들고 중복된 코드를 낮추는 방향으로 "코드를 개선하는 것"

5. 소프트웨어가 커지고 복잡해지는데 있어서 리팩토링을 해야 좋은 프로그램을 만들 수 있음

6. 우리가 만든 코드에서 비효율적인 것들을 제거하는 리팩토링의 사례를 보자

7. day/night 기능을 스크롤한 밑에서도 보이게끔 디자인 하고 싶음

8. copy & paste를 하단에 적용하면 기능은 구현되지만 버튼 day <->night 바뀌는 상호작용은 되지 않음을 확인 가능 

9. 위쪽에 위치한 버튼만이 바뀜을 확인할 수 있음

10. 이때 우리가 하단 버튼의 인덱스가 되는 id값을 night_day2 / 상단 버튼의 id값 night_day1으로 구분해줘야함 => 왜 그런지 곰곰이 생각해 보니깐 id값은 "고유값"임

11. 조금 극단적으로 생각해보면 이런 버튼을 1억개 복사한다? id값, 1억개를 모두 바꿔줘야함 

12. 이런 불편함이 있기 때문에 onclick과 같은 event 안에서 실행되는 코드들, 이 코드가 속해 있는 태그 즉,  여기에서 index라고 할 수 있는 태그를 가리키도록 약속되어 있는 특수한 키워드가 있음

13. "this"

14. document.querySelector('#night_day2').value == 'night') 코드를 살펴보면 자기 자신을 가리키고 있는 코드임

15. onclick event가 속해 있는 태그 자신을 나타냄 

16. this를 씀으로써 훨씬 편리하게 유지, 보수가 가능해짐

17. 하지만 document.querySelector("body") 라는 부분이 계속 반복됨을 확인할 수 있음

18. 코딩을 잘하는 방법중 하나는 반복을 찾아 끝까지 없어 버리는 것

19. 프로그래밍에서 생긴 여러가지 기술은 중복의 제거와 관련되어 있는 경우가 많음

20. var target = document.querySelector('body') target은 body 태그가 되는 것임

21. 변수라는 것을 활용하면 코딩을 하는데 큰 도움을 받을 수 있음

------------------------------------------------------------------------------------------------

반목문의 예고

1. 우리가 만든 예제의 불편한 점을 찾아보자

2. <a> 태그 링크가 기본화면 일 때는 선명하게 잘 보이지만 야간모드 일 땐 잘 식별되지 않음

3. 밝은 경우에는 조금 어두운 형식으로, 어두운 경우 밝은 형식으로 보이게끔 하고자 함

4. 이 웹페이지의 style 속성 값을 밝게 바꿔주는 그런 코딩을 하면 되겠지만 만약 링크가 1억개면 어떻게 할 것인가 

5. 이런 절망적인 상황에서 우리를 구원해 주는 기능이 반복문임

6. 다음 시간에 우리가 배울 내용은 배열, 그 배열을 이용한 반복 작업을 처리하기 위한 반복문을 배울 것임

------------------------------------------------------------------------------------------------

반목문

1. ex7.html로 실습

2. <ul><script>document.write('<li>1</li>');
	       document.write('<li>2</li>');
	       document.write('<li>3</li>');
  	       document.write('<li>4</li>');
   </script></ul>

3. 이렇게 순서대로 실행되는 것이 프로그램의 기본적인 실행 순서임

4. 만약 1억개를 넣는다고 가정하면 모두 코드를 복붙 해야할까?

5. 만들어놨다고 해도 버그가 발생하면 모두 바꿔야하는 절망적인 상황이 발생함

6. 이때 반복문을 사용한다면 크게 개선할 수 있게됨

7. <ul><script>document.write('<li>1</li>');
	       while( ) {
	       document.write('<li>2</li>');
	       document.write('<li>3</li>');
	       }
  	       document.write('<li>4</li>');
   </script></ul>

8. 조건문 if 괄호에는 불리언 데이터 타입이 들어갔음, while 괄호 또한 불리언 데이터 타입이 들어감

9. 반복문은 조건문과 함께 순서대로 실행되는 프로그램의 실행 순서의 흐름을 제어하는 제어문임 

10. 반복문을 true에만 맞춰 실행하면 무한히 반복되어 컴퓨터 자원을 모두 가져감

11. 항상 반복문에는 "언제 종료 할 것인지"를 잘 지정해야함 

12. 우리는 3번 반복하게끔 만들 것이고 그러기 위해서는 두줄의 코드가 몇번 실행됐는지를 어딘가에 적어 놓아야함 

13. 그런 역할을 부여할 것이 관례적으로 변수 i 임

14. var i = 0

     <ul><script>document.write('<li>1</li>');
	       while(i < 3) {
	       document.write('<li>2</li>');
	       document.write('<li>3</li>');
	       }
  	       document.write('<li>4</li>');
	       i += 1
     </script></ul>

15. i += 1 기존의 i 값에 1을 더한 결과를 i의 새로운 값으로 준다라는 의미

16. 반복문을 돌리게 되면 i의 값이 1씩 증가함

17. 우리가 원하는 3번을 반복하게끔 하기위해서는 while(i < 3)이라고 적어주면 됨

18. i 가 3보다 작은 조건을 true 만족시키는 횟수가 3번이기 때문에 3번 반복 후 반복문이 종료됨

------------------------------------------------------------------------------------------------

배열과 반복문

1. ex8.html로 실습

2. 동료들의 이름을 <li> 태그를 이용해 나열해보자

3. 만약에 목록이 1억개고 <li> 태그가 아닌 다른 복잡한 태그고 수정이 아주 빈번하게 일어난다고했을때 매우 난처한 상황임을 인지할 수 있음

4. 서로 연관된 데이터를 JS에서 담는 방법이 배열이었고 배열에 있는 데이터를 순차적으로 꺼내서 <li>안에 있는 역할을 할 수 있는 것은 반복문임

5. 첫번째로 동료이름의 배열을 만듦

	<script>
        		var coworkers = ['egoing', 'leezche', 'duru', 'taeho', 'graphittie'];
    	</script>

6. 두번째로 li를 5번 반복할 수 있는 반복문을 만듦

	<ul>
        	<script>
            		var i = 0;
            		while(i < 5){
           		document.write('<li></li>');
            		i += 1;
        		}
        	</script>
    	</ul>

7. 세번째로 배열에 있는 원소들을 나열하게 끔 반복문을 수정 

	<ul>
        	<script>
            		var i = 0;
            		while(i < corworkers.length){
           		document.write('<li>' + coworkers[i] +'</li>');
            		i += 1;
        		}
        	</script>
    	</ul>

8. 배열 안에 있는 원소들 이외에 추가되거나 제거되는 원소들에 대해서도 유연하게 출력할 수 있는 형태를 갖춤

9. 반복문을 사용해서 배열 안 원소에 따른 유연한 형태의 로직을 만들 수 있음 


	




