CSS의 등장

1. 웹 페이지들에 대한 예쁘고 보기 좋게 하고 싶은데서 오는 불만들이 생김

2. 사람들은 기존 html tag에 꾸미는 요소를 추가하는 방법으로 쉽게 접근함 대표적으로 <font>

3. <font color = 'red'> txt </font> - txt 색깔을 빨간색으로 디자인 하는 tag

4. 디자인으로써 코드는 정보가 아니라고 이야기 할 수 있음

5. 만약 <a>가 4개가 아닌 1억개로 매일 같이 색깔을 바꿔달라고 하면 어떻게 할까?

6. 웹 브라우저가 인식하기 위해서는 CSS코드를 HTML문법으로 이야기해줘야함

7. <style>a { color : red;}</style> - a 태그의 txt를 모두 빨간색으로 바꿔주는 CSS 코드

8. 핵심은 기존에 <font> tag를 4개 중복해서 썼다면 CSS는 중복 코드를 제거해준다는 것임

9. 가독성이 높아지고 디자인과 관련된 <style> tag 안에 코드를 목적에 맞게 추가/제외 시켜 활용 가능

10. HTML 정보 | CSS 디자인

--------------------------------------------------------------------------------------------------------------------------------


CSS 사용법

1. CSS 링크를 클릭한 상태의 화면이라는 점을 표현하고 싶음

2. CSS text를 감싸고 있는 a tag에 직접 CSS 코드를 넣을 것임

3-1. 웹브라우저 입장에서는 HTML 과 CSS를 구분하기 위해서 tag에 CSS 효과를 주고 싶을 때 약속을 하게 됨

3-2. <a style = "color : red"> CSS </a> style 속성이 위치하고 있는 이 tag에 적용할 것이다!

4. "color : red" - html 속성 // 그 값으로 반드시 CSS 효과가 들어온다 - style 속성

※ 지난 시간에 배웠던 웹페이지에서 주고 싶은 효과를 누구에게 줄 것인가를 선택하는 것으로 
   <style> a {color : black}; <style> 으로 작성함 
   이때 "a"를 선택자, selector 라고 하며 "color : black" 선택자에게 지정될 효과, 선언(declaration)이라고 함
   
※ 선언은 style속성을 tag안에 직접 사용한 경우 style 속성이 위치한 tag에 효과를 줄 것이기 때문에 선택자를 사용할 필요가 없음

∴ 웹페이지 안에 CSS를 삽입하는 방법 
   1. style tag 사용(선택자, 선언)
   2. style 속성 사용(선언)

5. a tag의 밑줄을 없애고 싶을때 style tag 내에 text -decoration : none; 입력

6. a tag CSS 항목만 밑줄을 긋고 싶어 해당 a tag내 style 속성에 text - decoration : underline; 입력

7. description이 시작되고 끝나는 것을 구분하기 위해 구분자 세미 콜론을 사용

--------------------------------------------------------------------------------------------------------------------------------


CSS 속성 스스로 알아내기

1. CSS에서 어떤 효과를 의미하는 용어 "property"

2. h1 tag의 text 사이즈를 키우고 가운데 정렬을 하고 싶음

3. 기본적인 CSS 사용법을 아는 우리는 검색엔진을 활용하면 모든 property를 외울 필요가 없어짐

4. 각각 css text size property, css text center property를 이용해 검색해 본 결과 

5. font-size: 45px, text-align : center 해법을 찾아낼 수 있었음 

--------------------------------------------------------------------------------------------------------------------------------

CSS 선택자 스스로 알아내기

- 학습 목표 : 1) 모든 링크는 기본적으로 검정색, 2) 사용자가 방문했던 각각에 링크는 회색, 3) 현재 머무는 페이지는 빨간색으로 표시

1. 첫번째 a 선택자를 지정한 후 검정색으로 지정 <style> a { color : black } </style>

2. 두번째 방문했던 링크를 회색으로 만듦 - 기존에 배웠던 방식 <a style = "color : gray;"> tag 안에 스타일 속성을 이용해 지정함, 단점으로 중복 태그가 발생하며 이 문제를 어떻게 해결할까?

3. a tag의 text들을 그룹으로 묶고 그룹에 대해서 폰트 컬러를 회색으로 줄 것 - class 라는 HTML 속성을 이용

4. <a class = "saw"> saw라는 class 값을 가지는 tag 2개를 만듦

5. saw라는 class 값을 가지고 있는 tag에 대해서 폰트 컬러 회색을 줄 것 

6. <style> a { color : black }  .saw{color : gray;} </style> - .표기를 통해 class 값임을 명시해 줌, class = 그루핑하다

7. 세번째 머물고 있는 페이지를 표시하려고 함 - <a class = "saw active"> | <style> a { color : black }  .saw{color : gray;} .active{color : red;} </style>

8. class 라는 속성의 값은 1) 여러 개의 값이 들어올 수 있고 2) 여러개의 선택자를 통해서 하나의 tag를 공동으로 제어 할 수 있다

9. 빨간색이 된 근본적인 원인을 살펴보자면 style tag 안에 가장 마지막에 등장하는 선택자가 우선 순위가 높음 <style> a { color : black }  .saw{color : gray;} .active{color : red;} </style>

10. 반대로 이야기하면 class active 선택자가 앞으로 당겨지면 적용이 안된다고 볼 수 있음 - 우선 순위 높은 선택자를 이용할 필요성이 있음

11. <a class = "saw"  id = "active"> | <style> a { color : black } #active{color : red;} .saw{color : gray;} </style>

12. ID 선택자가 Class 선택자 보다 앞에 있음에도 빨간색이 적용되는 것을 볼 수 있음, 위에 언급했던데로 stlye tag 안에 가장 마지막에 등장하는 선택자가 우선순위가 높음

13. ID 선택자 > Class 선택자 > TAG 선택자 

14. 왜? - 좀 더 구체적인 것을 포괄적인 것보다 우선순위를 높임, tag 선택자를 통해 전체적인 tag의 디자인을 쭉 해내고 예외적인 것들의 id 선택자를 두면서 디자인하고 코딩하는게 효율적이기 때문

15. CSS selector를 검색해 우리가 원하는 선택자를 보면서 보다 똑똑한 코드를 작성할 수 있음


--------------------------------------------------------------------------------------------------------------------------------

CSS 박스모델

- 학습 목표 : 박스모델에 전반적인 개념 확립


1. h1 tag는 화면 전체를 쓰고 있고 줄 바꿈이 적용됨, 반면 a tag는 똑같은 tag임에도 다른 컨텐츠와 같은 라인에 위치함

2. h1 tag는 제목 tag, 화면 전체를 쓰는 것이 편리하기 때문 

3. a tag 링크가 화면 전체를 쓴다면 앞뒤에 있는 컨텐츠가 줄바꿈 되어 상당히 불편할 것, 딱 자기의 컨텐츠 크기만큼 사용

4. h1, a tag의 부피감을 본격적으로 알아보자

5. <style> h1 { border-width: 5px; 테두리 두께 border-color: red; 테두리 색깔 border-style: solid 테두리 선 스타일 지정

6. h1 tag는 화면 전체를 쓴다는 것을 파악할 수 있음

7. a tag로 선택자를 바꿔주면 자기 컨텐츠만큼의 부피를 사용한 다는 것을 알 수 있음

8. 이처럼 화면 전체를 쓰는 tag, 자기 컨텐츠만큼의 부피를 사용하는 tag를 나눠볼 수 있음 

9. 화면 전체를 쓰는 tag를 우리는 block(block level element) 

10. 자기 컨텐츠 만큼 쓰는 tag를 inline element

11. block이라고 하더라도 자기 컨텐츠만큼 사용할 수 있게 하는 방법으로는 <style> h1 { display : inline;}

12. inline도 전체를 쓰게 하고 싶을 때는 <style> a { display : block;}

13. 요약 // h1, a 태그는 각각 display 기본값이 block, inline으로 설정 되었을 뿐 변경이 가능함 

14. TIP : diplay : none ; 은 해당 tag를 지움,  (*/ 내용 /*) CSS 주석 

15. 중복값이 발생한 점에서 우리가 요약할 수 있는 방법으로는

16. <style> h1, a { border-width: 5px; border-color: red; border-style: solid; } </style> // 선택자에 콤마를 붙여 요약 가능

17. 하지만 border- 의 중복도 싫었던 개발자들은 h1, a { border : 5px solid red }로 표현함(순서 상관 없음)

18. 실제 박스 모델에 집중하기 위해 h1 태그만 남겨두면 컨텐츠와 테두리사이에 간격, 여백이 없음

19. padding : 20px // 테두리와 컨텐츠 안의 간격을 부여

     margin : 0 // 태그간에 테두리 간격을 조절
    
     display : block // 컨텐츠를 사용하는 범위

     width : 100px // display 값을 유지하면서 컨텐츠 출력 범위 조절

21. 이를 모두 통틀어 CSS 박스 모델이라고 칭함 

--------------------------------------------------------------------------------------------------------------------------------


CSS 그리드

- 학습 목표 : 목록과 본문이 나란히 위치하게 되는 디자인을 구현하고자함

1. 새로운 파일을 생성 후 기본적인 HTML 세팅을 완료함, <body> 안에 NAVIGATION ARTICLE 두 문자를 넣음

2. 각각의 문자에 테두리를 주고 나란히 배치하려고 함 

3. 그리기 위해서는 각각을 어떤 tag로 묶어줘야하는데 우리는 단순히 디자인을 해주기 위해서 tag를 사용하고자 함 

4. <h1>를 쓰자니 자체로 제목을 나타내는 것으로 사용하는데 과한 부분이 존재

5. 따라서 우리는 디자인을 위해 어떤 의미도 존재 하지 않는 tag를 사용해야할 때가 있음 

6. <div> , <span>가 있으며 각각 block , inline display 속성을 가지고 있어 필요에 따라 선택해 사용하면 됨 

7. 그리드를 알아보기 위해서는 각각의 태그의 부피감을 확실하게 알아봐야 하는데 <style> div { border: 5px solid gray }

8. <style> div { border: 5px solid gray } 로 테두리를 형성

9. 해당 두 텍스트를 나란히 놓으려는 목표를 달성하기 위해서 그리드를 사용하려고 함  

10. 우선 <div> 두 개를 감싸는 부모 tag가 필요, 두 tag를 나란히 배치하고 싶을땐 그것을 감싸는 부모 tag가 꼭 필요

11. <div id = "grid"> <div> NAVIGATION </div> <div> ARTICLE </div> </div>

12. id 이름은 상관 없으며 id 선택자 #grid에 핑크색으로 선언할 것임 

13. 앞서 배웠던 display 옵션에 inline, block 값이 아닌 grid를 넣어줌 - 변화X  

14. 다음 줄에 grid-template-columns : 150px , 1fr

15. NAVIGATION은 150px 부피, ARTICLE은 1fr 나머지

16. NAVIGATION은 150px 값을 고정적으로 갖고 ARTICLE은 화면에 따라 달라지는 모습 확인

17. 화면크기를 자동으로 조절해 사용하는 것을 fr이라고 보면 됨

18. 그리드를 사용하면 좋은 것이 ARTICLE이 아닌 긴 텍스트를 입력해도 텍스트가 많아짐에 자동으로 커지고 왼쪽의 NAVIGATION       을 감싸는 테두리 역시 같이 커짐

19. can i use라는 사이트를 활용해서 grid를 검색해보면 chrome에서 지원하는 버전과 전세계 얼만큼 사용하고 있는지 %로 보여줌

--------------------------------------------------------------------------------------------------------------------------------


CSS 반응형 디자인 media query

- 학습 목표 : 화면의 크기에 따라서 웹페이지의 각 요소들이 반응해서 최적화된 모양으로 바꾸려고함

1. 반응형 웹, 반응형 디자인, Responsive Web 이라고 부름

2. 화면의 크기에 따로 보였다 안보였다 하는 것은 다른 말로 화면 크기에 따라 다르게 디자인 했다와 일맥상통함

3. 우선 화면의 크기가 800px 보다 크냐 작냐에 따라서 <div> tag를 보이게 또는 안 보이게 하고 싶다면 화면의 크기가 얼마인지 먼저 알아야 함, F12를 이용해 관리자 창을 띄워 창을 드래그 해보면 px 값이 보임 

4. 우리가 하고 싶은 작업을 간단하게 표현 하자면 screen width > 800px div { display : none; }

5. 위에 코드는 간단하게 표현한 가짜 코드로 mediaquery을 사용해 바꿔줘야 함

6. <style> @media(min-width : 800px) { div { display : none; } } 

7. 웹 화면이 최소 800px 이상을 넘어가면 div tag가 없어지도록 한 코드

8. max-width : 800px 라고 한다면 800px 이하로 낮아지면 div tag가 없어짐

9. media query를 이용하면 화면의 특성에 따라 어떠한 조건을 만족할 때만 CSS 내용이 동작하도록 하는 것이 가능함

--------------------------------------------------------------------------------------------------------------------------------


CSS 코드의 재사용

- 학습 목표 : 우리가 만든 CSS 코드를 다른 페이지에 적용을 할 때 중복 코드를 제거해 유지 보수를 간편하게 함

1. CSS 코드를 다른 링크 페이지에도 전파하여 적용시키면 동일한 양식의 디자인을 가진 웹페이지가 완성됨

2. 극단적으로 생각해봤을때 만든 페이지가 1억개라고 한다면 어떨까?

3. 하나 하나 모두 수정해야한다고 하면 중막노동과 다를바가 없음

4. 이런 문제가 발생하는 것은 우리가 작성한 CSS 코드가 중복해서 등장하기 때문

5. 중복의 제거 중요성을 각인하고 공감해보자!

6. 첫번째로 <style> tag를 제외한 순수한 CSS코드만을 복사해 style.css라는 파일에 붙여넣음 

7. 기존에 html 상에 작성했던 <style> tag 코드 삭제

8. <link rel ="stylesheet" href = "style.css">

9. <link> tag를 이용해 이 웹페이지가 어떤 css 파일과 연결되어 있는지를 웹브라우저에서 알려줌

10. css 파일내의 코드만을 수정하면 해당 css 파일에 link 되어있는 모든 페이지에 영향을 줄 수 있음

11. 우리가 가급적 css 파일을 만들었다면 별도의 파일로 꺼내서 중복을 제거하는 것을 추천함

12. 공감해야할 점은 중복을 제거하면서 앞으로의 유지 보수 간편화를 추가한다는 부분임
