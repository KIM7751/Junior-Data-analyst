웹 기초 상식

1. 1990년 스위스 웹이 시작(info.cern.ch) 일반인들에게 "인터넷"이 대중화되는 큰 사건

2. 웹 브라우저 (request : 요청 ) <=> 웹 서버 (response : 응답) 
   client 컴퓨터 <=> sever 컴퓨터

3. 웹 서버를 사용할 수 있다 = 내 컴퓨터 문서 전 세계 누구나 웹 브라우저로 가져다 볼 수 있게 한다

4. 웹 서버: 언제 접속할지 모르기 때문에 항상 켜져있어야 함 
	서버 제공 기업 -> 웹 호스팅 기업

5. 대표적인 서비스 페이지 Git hub, 무료로 우리가 만든 웹사이트를 접속할 수 있게끔 함

6. 저장소에 작업 소스를 업로드 후에 세팅에 들어가 git page를 눌러 웹서버 사용 설정함
   방문자는 우리가 만든 웹페이지를 접속할 수 있게됨 즉, 우리가 웹 호스팅을 할 수 있음

7. 웹 서버를 운용할 수 있는 프로그램 bitnami를 window 운영체제에 다운로드 함
  
  3307, bitnami 설치 경로에 있는 manage 툴을 실행해 aphache를 실행/중단을 진행함
  
  컴퓨터에 bitnami가 설치한 htdocs 경로 안에 index.html 파일이 저장되어 있음

  우리의 컴퓨터엔 웹 브라우저와 웹 서버가 모두 한 대의 컴퓨터 안에 설치된 상태

  웹 브라우저로 웹 서버를 통해서 htdocs 밑에 있는 index.html 파일을 가져오고 싶음

  http://127.0.0.1/index.html 주소 창에 입력했음

  127.0.0.1 internet protocol address IP 주소

  그리고 웹 브라우저가 설치되어 있는 각자의 컴퓨터 웹서버를 가리키는 약속된 주소

  /index.html 웹 브라우저가 자신의 컴퓨터에 설치된 웹 서버에 접속해서 /index.html 원함

  웹 서버는 htdocs 경로에서 파일을 찾도록 기본적으로 설정되어 있는 상태

  htdocs 경로에서 index.html 파일을 읽어 웹 브라우저에게 전송

  웹 브라우저는 해석해 화면에 표시하는 프로세스

  http:// 웹 브라우저가 웹 서버에 요청 / 웹 서버가 index.html 파일을 열어서 웹 브라우저 전송

  file:// 웹 서버는 이 과정에 개입하지 않음 웹 브라우저가 직접 index.html 파일 읽어 화면 표시

  file:// 파일 경로에서 직접 여는 것

  http:// 웹 서버와 웹 브라우저가 서로 통신할때 사용하는 통신 규약

  Hyper Text Transfer Protocol

  현재 우리가 사용하는 컴퓨터엔 웹 서버, 브라우저가 동시에 설치되어 있어 별 차이가 없음

  하지만 서로 다른 컴퓨터에 있는 웹 서버, 브라우저의 통신엔 http://가 필요함

8. 아파치 HTTP 서버는 아파치 소프트웨어 재단에서 관리하는 오픈 소스, 크로스 플랫폼 HTTP 웹 서버 소프트웨어
   
   BSD, 리눅스 등 유닉스 계열 뿐 아니라 마이크로소프트 윈도우나 노벨 넷웨어 같은 기종에서도 무료로 운용할 수 있음

9. 사설 IP와 공인 IP의 차이
		
		공인IP (Public IP)  			|	  	사설 IP (Private IP)
할당 주체		ISP(인터넷 서비스 공급자)		|		라우터(공유기)
할당 대상		개인 또는 회사의 서버(라우터)		|		개인 또는 회사의 기기
고유성		인터넷 상에서 유일한 주소		|		하나의 네트워크 안에서 유일
공개 여부		내/외부 접근 가능			|		외부 접근 불가능

10. 스마트폰도 한 대의 컴퓨터로 볼 수 있음

11. 127.0.0.1 모든 컴퓨터가 자기 자신을 부르기로 한 약속 <-> 사설 IP주소

12. 스마트폰(웹 브라우저)과 랩탑(웹 서버)의 IP 주소를 맞춰 접속해 보았으나 방화벽에 막혀 접속하지 못함

13. iframe 코드 하나로 웹 페이지에 동영상을 삽입할 수 있게 됨

14. disqus create website -> 코드를 복사해 댓글 기능을 추가할 수 있음

15. 단 웹 서버 apache를 이용해 운용 중인 상태여야 가능

16. localhost/127.0.0.1/~ 댓글 기능 확인 가능


-------------------------------------------------------------------------------------------------------------------------------


UI = User Interface 

1. 컴퓨터라는 시스템과 컴퓨터를 사용하는 사람 사이에 접점이 존재하면서 사람이 생각하는 바를 컴퓨터에 전달하는 입력장치

2. 컴퓨터의 계산 결과나 상태를 사람에게 보여주는 출력 장치 

3. 사용자를 대면하는, 접점이되는 지점을 UI라고 부름


-------------------------------------------------------------------------------------------------------------------------------


API  = Application Programming Interface

1. 인터넷 익스플로어 주소창에 javascript:alert("hello"); 를 작성하고 엔터를 누르면 hello 문구가 적힌 팝업창, UI를 볼 수 있음

2. alert 경고창을 띄어주는 명령

3. 화면에 뜬 경고창은 내가 만든 것일 수도 있고 아닌 것일 수도 있음.

4. 팝업창 확인 버튼은 내가 작성한 코드 javascript:alert("hello"); 안에 포함 되어 있지 않음

5. 화면 상단에 위치하게끔 설정한 부분 또한 마찬가지임, 이러한 측면에서는 내가 만들지 않았다라고 볼 수 있는 것임

6. 하지만 팝업창에 hello는 우리가 코드로 hello를 전달했기 때문이고 출력 또한 코드로 전달함 내가 만들었다라고 할 수 있는 부분

7. alert 이라는 명령은 우리에게 웹브라우저를 제어하기 위한 인터페이스인 것임

8. 단, 이 인터페이스는 일반 사람들이 사용하는 스크롤, 닫기, 확인 버튼과 같은 그런 종류의 인터페이스는 아님

9. 코드의 형태를 띄고 있는 인터페이스, 웹브라우저를 조작하는 이러한 코드들을 이용해 애플리케이션을 만드는 것임

10. 그런점에서 alert과 같은 인터페이스를 사용자가 사용하는 인터페이스와 구분하기 위해서 API라고 부름

11. 팝업창을 띄우는 복잡한 과정이 필요함에도 불구하고 우리는 alert 이라는 명령을 이용해 적은 노력으로 사용하게 된 것

12. 일반 사용자는 눈에 보이는 UI를 // 개발자는 alert와 같은 API를 이용해 웹 브라우저를 제어한다고 볼 수 있음


-------------------------------------------------------------------------------------------------------------------------------

Front-end  Back-end  API


1F. 우리가 보는 화면을 의미 
   
1B. 화면에 보여줄 정보를 처리하는 곳을 의미


2F. 게시판을 예로 들자면 게시판의 틀, 제목이 들어갈 위치, 내용이 들어갈 위치
   
2B. 실제로 게시판에 있는 제목이나 내용 등 실제 데이터를 처리하는 곳을 의미



3F. 프론트 엔드에서 1번 글을 들어가면 백엔드에 1번 글을 달라고 프론트 엔드가 요청을 함

3B. 백 엔드는 DB를 찾아서 1번글에 해당하는 제목이나 내용 등 정보를 가져와서 프론트 엔드에 전달함


4. 프론트 엔드는 그 정보를 표시해주는 역할을 함, 이때 프론트 엔드가 백 엔드에 요청을 할 때 특정 규칙에 맞게 요청을 해야함

5. 사용 규칙을 제공하는 것을 API라고 함

6. openAPI는 누군가 백 엔드를 만들어 놓고 여기에 주소와 사용 규칙을 공개한 것을 의미 

7. 우리는 이 백 엔드의 주소와 사용 규칙만 알면 프론트 엔드만 만들어도 얼마든지 요청하고 데이터를 가져와서 프론트 엔드에 사용

8. 공개된 백 엔드를 이용하고 프론트 엔드만 만들어 쓰는 것을 serverless(서버리스) 라고 부름 

9. 프론트 엔드만 있는 내 사이트에서 API 서버 주소로 어떤 정보를 달라고 요청하면 API 서버는 자체 DB를 뒤져서 원하는 정보전달

10. 이때 서버에 정보를 달라고 하는 것을 "요청 = request" // 찾은 정보를 내 사이트가 받는 것을 "응답 = response"
