Day 2 

[1-1-1] 프레임워크 - 일정하게 짜여진 틀에서 일한다 라는 뜻으로 해석됨.
		
	 소프트웨어 프레임워크 - 응용 프로그램 개발이나 문제 해결을 수월하게 하기 위해
	  	 	        설계와 구현을 재사용이 가능한 형태로 제공하는 소프트웨어 환경을 말함
			      - 소프트웨어 구성에 필요한 기본 뼈대를 제공함(여기서 플랫폼과는 다르게 유기적, 지속적 교류는 없음)
			      - 다양한 소프트웨어 개발을 가능하게 하는 여러 형태의 컴포넌트를 말함
                                          - 완제품이 아니며 개발자의 코드나 사용자의 데이터가 필요
			
			      특징 - 모듈화 (단위, 부품화)
				- 재사용성 (누구든 다 쓸 수 있음)
				- 확장성 (확장이 얼마나 쉽고 가능한가에 대한 용이성)
				- 제어의 역 흐름
			
         
          기업용 소프트웨어 

	  오피스웨어 - 회사나 단체에서 업무에 사용되고 엑셀, 워드, 피피티 등 업무용 소프트웨어와 그룹웨어(인트라넷)를 포함하는 기업용 소프트웨어

	  ERP - 경영 활동 프로세스 통합적 연계 관리 소프트웨어
                    - 기업에서 발생하는 정보들을 서로 공유하고 새로운 정보의 생성과 신속한 의사결정을 도움(전사적 관리)
	  
              SCM - 부품 공급자를 지원하는 소프트웨어
                     - 물류의 흐름을 하나의 가치 사슬 관점에서 파악함

              BI - 각 조직의 구성원에게 적시에 의사 결정을 할 수 있도록 지원

              CRM - 신규 고객을 획득하거나 기존 고객 유지 및 수익성 증대를 목적


	컴포넌트

	  개념 - 부품화된 프로그램을 모듈 -> 모듈의 집합을 라이브러리 -> 라이브러리 집단을 컴포넌트라고 함(라이브러리 기능별로 분류하고 지원)
              
	  설계 - 설계 시 협약에 의한 설계를 따를 경우 조건들이 포함 됨(3가지)

	  CBD - 컴포넌트를 가지고 SW 개발

	
	소프트웨어 공학

	   소프트웨어 위기 - 유지 보수 비용 증대 (개발 보다 유지 보수 비용이 증가)
			- 개발 비용 증대
			- 관리적인 면이 증대 (유지 보수와 함께 중요성이 증가)
			- 개발 기간의 지연
			- 소프트웨어 기술 발전 속도 느림 (하드웨어 발전 속도가 월등히 빠른 반면 소프트웨어가 따라가는 속도가 느림)
			- 대화 단절 (클라이언트와 공급자간에 의사소통 부재)
			- 품질 평가 기조 부재 (꾸준하게 필요한 유지 보수로 인해 품질 평가가 무의미)
			- 개발 인력 부재
              
	   소프트웨어 공학의 도입 - 소프트웨어 개발 과정에 공학적인 접근을 시도해 생산성과 신뢰성을 높이기 위한 기법
			       
	    
 	     