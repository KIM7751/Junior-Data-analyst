Day 8

[1-1-2]

        [6] 애자일 방법론 - 고객중심, 상호작용, 대화, 피드백(수요자와 개발자간 꾸준하고 잦은 대화, 소통 그리고 문제점을 지속적으로 개선해 나감)
                          
                          배경 - 사용자의 요구사항이 빈번하게 변경되어 새로운 방법론이 필요
                               
                               - 계획이 없는 개발 방법의 경우 선행 작업을 예측하기 힘들고 효율적이지 못하는 점에서 취약점을 가짐
                               
                               - 계획이 지나치게 많은 개발 방법론의 경우 형식적인 절차를 따르는 비용과 전체적인 개발의 흐름 자체를 느리게 함
                               
                               - 애자일은 개발 과정의 어려움을 극복하기 위해 적극적으로 모색한 방법론
                               
                          
                          정의 - 요구사항, 설계, 구현, 시험 단계를 통해 개발해 나감
                          
                               - 계획이 없거나 계획이 많은 개발 방법들 사이의 타협점을 찾음
                               
                               - 개발 단계의 변화에 신속하게 대응하기 위해 요구사항을 지속적으로 분석하고 반영하여 시간 지연 최소화
                               
                          
                          특징 - 소통을 중요하게 생각하는 소프트웨어 개발 방법론으로 반복적인 개발을 통한 잦은 출시를 목표로 함
                              
                               - 기존 모형의 문제점을 보완한 모형
                               
                               - 소프트웨어를 점증적으로 개발 
                               
                               - 고객과 개발팀과의 소통, 개발팀 간의 협력을 극대화함
                               
                               - 가볍고 실용적인 소프트웨어 개발 방법론
                               
                               - 애자일 방법론을 소프트웨어 개발 방법론의 "상위 레벨 방법론"이라고 함
                               
                
                애자일 선언문   1)상호 관계 중시 
                                 
                                2) 문서 < 포괄적인 흐름(Active) 
                                 
                                3) 계약 < 고객과의 협력(Collaborate) 
                                 
                                4) 수행 < 대응(Response)
                                
                                단, 보다 우선 순위를 가지는 것을 표현하는 것일 뿐 무시하는 것은 아님을 주의
                                
                                
                   5가지 가치  - 의사소통, 용기, 피드백, 단순함, 존경
                   
                   
                        종류    1) XP(eXtreme Programming): 문서화 강조 X, 개발 초기 검사를 병행
                        
                                2) 스크럼(Scrum): 정해진 시간과 장소, 단기간 개발 중심의 방법론, 상호 점진적 개발 방법론
                                
                                3) 린(Lean): 낭비요소 제거, 품질 향상
                                
                                4) DSDM(Dynamic System Development Method): 동적 S/W 방법론으로 사용자 적극참여
                                
                                5) FDD(Feature Driven Development): 기능 개발 중심, 조금씩 구체적으로
                                
                                
        [7] 제품 계열 방법론 - 새로운 형태의 개발로 나아가야 함, 컴퓨터 획일화 분산화
        
                             - 특정 제품에 적용하고 싶은 공통된 기능을 정의해 개발
                             
                             - 임베디드 S/W 작성하는데 유용(기계를 제어하는 프로그램, 냉장고, 세탁기 ,,)
                             
        
        [8] 테일러링 개발 방법론 - 서로 다른 개발 환경, 다양한 종류의 프로젝트를 하나의 일관된 개발 방법론으로 적용하기 어렵기 때문에 등장
        
                                 - 개발하려는 소프트웨어 특성에 맞게 융통성 있게 적용하는 방법론
                                 
                                 - 표준 프레임워크 기반 실제 업무 분야별 여건에 맞게 수정 보완하는 방법
                                 
                                 - 방법론에는 표준이 없음 안내서들이 존재할 뿐
                                 
                                 - 커스터 마이징의 작업 반복 -> 최적화
                                 
                                 - 프로젝트 분석이 핵심
                                 
                                  
                         필요성  1) 내부기준
                         
                                    - 목표 환경: 개발 환경과 유형이 다른 경우 테일러링 필요
                                    
                                    - 요구사항: 요구사항이 다른 경우 테일러링 필요
                                    
                                    - 프로젝트 규모: 납기일(일정), 비용, 범위 등이 다른 경우 테일러링이 필요
                                    
                                    - 기술 환경: 방법론, 보유 기술, 구성원의 능력 등이 다를 경우 테일러링 필요
                                    
                                 2) 외부 기준
                                 
                                    - 법적 제약 사항: IT 컴플라이언스(사내 규정, 규칙) 등이 다른 경우 테일러링이 필요

                                    - 표준 품질 기준: 표준 품질 기준이 다른 경우 테일러링 필요
                                    
                                  
        [9] 보안 개발 방법론
        
                                 1) MS-SDL(Microsoft Secure Development Life Cycle)
                                 
                                    - 보안 수준이 높은 안전한 S/W 개발 위해 MS사가 자체적으로 수립함
                                    
                                 2) Seven Tochpoint
                                 
                                    - 실무적으로 검증된 개발 보안 방법론 중 하나로써 S/W 보안의 모법 사례를 SDLC에 통합한 S/W 개발 보안 생명 주기

                                 3) CLASP(Comprehensive Lightweight Application Security Process)
                                 
                                    - S/W 개발 생명주기 초기 단계에서 보안을 강화하기 위한 정형화된 프로세스, 활동 중심 역할 기반 프로세스 집합체
                                  
                                    - 이미 운영 중인 시스템에 적용하기 적합한 방법론
                                    
                                    - 개념, 역할 기반, 활동 평가, 활동 구현 취약성 5가지 관점 따라 개발 보안 프로세스 수행 제안
                                    
                                 4) CWE(Common Weakness Enumeration)
                                 
                                    - S/W의 보안 취약점을 유발하는 원인을 7가지로 정리한 방법론
                                    
                                    - 7가지 원인: 입력데이터 검증 표현, 보안 기능, 시간 및 상태, 오류 처리, 코드 품질, 캡슐화, API악용
                                  
                         
                                 
                                 
                                 
                
                
                