Day 6

[1-1-2] 

        순차적(절차적) 설계 -> 구조적 방법론(부품화, 모듈화) -> 정보 공학(자료, 데이터, 업무위주)  -> 객체지향(현실 실체 컴퓨터화, 상호작용, 재사용)
        
        -> 컴포넌트(객체지향 지원, 라이브러리 -> 컴포넌트화) -> 애자일 방법론(고객중심, 상호작용, 대화, 피드백 / 수요자와 개발자로 나뉘면서 생긴 대안) 
        
        -> 제품 계열 방법론 -> 테일러링 개발 방법론
        
        
        [1] 순차적 설계 방법론 - 처음 부터 끝까지 진행하는 것이라고 볼 수 있음
        
        [2] 구조적 방법론 - 1970년대 까지 많이 적용되었던 소프트웨어 개발 방법론
                          
                          - 구조화 프로그래밍 또는 구조적인 프로그램 작성이라고도 함(목수, 전기기사, 난방기사 따로)
                          
                          - 정형화된 분석 절차에 따라 사용자 요구사항(돌이킬 수 없으므로)을 파악해 문서화 하는 체계적 분석 방법
                          
                          - 쉽게 이해할 수 있고 검증할 수 있는 프로그램 코드 생성이 목적
                          
                          - 모듈(부품)중심으로 개발
                          
                          - 분할과 정복 방법으로 하향식으로 기능 분해(따로 작업하고 합침)
                          
                          - 프로세스(현재 실행 중인 프로그램) 중심 방식의 개발에 유용
                          
                          - 재사용성, 유지 보수성이 낮음(고민 자체를 많이 안함)
                          
        
        [3] 정보공학 방법론 - 1980년대 컴퓨터를 업무에 적용해 본 시기(자료, 데이터, 업무)
                            
                            - 수직적(구조적 방법론의 폭포수 모형을 크게 벗어나지 않음 + 업무), 수평적 구조가 있음
                            
                            - 정보 시스템 개발에 필요한 관리 절차와 작업 기법을 체계화한 방법론
                            
                            - 소프트웨어 공학의 기술 발전에 따라 활용하기 위한 개발 방법론
                            
                            - 생명주기를 이용해 대형 프로젝트를 수행하는 체계적인 방법론

                            - 기업 정보 시스템을 공학적 기법을 적용해 시스템의 계획, 분석, 설계 및 구축을 하는 데이터 중심의 방법론
                            
                            - 데이터와 프로세스가 균형적(단순, 1 : 1 매핑)
                          
                            - 기능적 설계를 벗어나지 못함(객체와 대비되는 부분)
                            
                            - 기능별로 유지보수를 해야하며 재사용성이 낮음 
                          
                         