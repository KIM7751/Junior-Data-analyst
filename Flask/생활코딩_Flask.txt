수업소개1

1. 1990년 웹이 처음 등장하면서 인류는 정보를 웹페이지로 표현할 수 있게 되었고

2. 인터넷을 통해 웹페이지를 전송할 수 있게 됨

3. 종이에 담겨 있던 수많은 정보들이 빠른 속도로 웹페이지로 만들어지기 시작함

4. 처음엔 HTML만으로 사람들은 행복했음 하지만 욕심은 끝이 없고 웹이 등장한 직후 여러가지 불만이 생김 

5. 불만족 중에 우리의 관심사는 HTML을 직접 타이핑해서 웹페이지를 수동으로 만드는 것에 지쳤다는 불만족임 

6. 사람이 직접 HTML을 직접 코딩해 웹페이지를 하나하나 만들어야했기 때문에 HTML의 구조를 바꾸려면 수많은 웹페이지 HTML 코드들을 수동으로 수정했어야함

7. 성장의 한계에 직면하게 되었고 한계에 봉착한 선구자적 욕심쟁이들은 귀찮고 반복되는 HTML의 작성 작업을 기계에게 시키고 싶다는 욕심을 품게됨

8. 이 욕망을 해소하기 위해서 컴퓨터 공학자들이 나서게 되는데 "Common Gateway Interface" CGI라는 기술이 출현함 

9. CGI를 사용하면 파이썬, PHP, JSP, ASP, 루비, 자바, JS 같은 기술을 이용해서 웹페이지를 자동으로 생성하는 웹 애플리케이션을 만들 수 있게됨

10. 그 중 우리의 관심사는 웹서버와 파이썬의 CGI로 연동하는 것임, (web sever - CGI - Python)

11. 많은 사람의 노력으로 파이썬을 이용해서 웹 애플리케이션을 제작할 수 있게됨

12. 이제부터 우리는 파이썬을 이용해 웹페이지를 찍어내는 거대한 공장인 웹 애플리케이션의 공장장이 되어보자 

13. HTML 코딩하는 지루하고 단순한 일은 웹 애플리케이션에게 맡기고 우리는 컨텐츠를 생산하는 창의적인 일에 전념해보자

--------------------------------------------------------------------------------------------------------------------------

수업 예고

1. 사용자가 웹 브라우저에서 어떤 주소를 입력하고 웹 서버에 접속함

2. 웹 서버는 사용자가 요청한 파일을 다큐먼트 루트 즉, ht docs 라는 디렉토리에서 찾아서 응답해주면 이 과정이 끝남

3. 웹 페이지의 개수는 HTML 파일의 개수와 같음

4. 하나의 HTML 파일에서 ul 태그를 ol 태그로 바꿨을때는 상관없지만 1억개를 바꾼다고 가정해보자

5. 1억개의 HTML을 하나하나 모두 고쳐야할 것임

6. 일괄적으로 바꿀 수 있는 것이 아니라 일괄적으로 바꾸려고 시도를 하게되면 바뀌면 안되는 것 까지도 바뀌어 버리는 상태가 나타날 수도 있음

7. 우리의 웹 애플리케이션 즉, 웹 사이트는 어떤 정보를 추가할 때 이 웹사이트의 주인장만이 글을 추가할 수 있음

8. 그러나 우리는 그 사이트에 주인이 아닌 사람들도 글을 써서 웹 페이지를 만들 수 있게끔 만들고 싶음

9. 그러기 위해선 파이썬이나 PHP, JSP와 같은 서버 쪽에서 동작하는 프로그래밍 언어의 기술이 필요한 것임

10. 우리의 서버 쪽 컴퓨터에는 이전에 웹 서버만이 있었는데 이제는 "파이썬"이라는 기술이 포함됨 

	Web browser - Web server - Python - File

11. 웹 브라우저가 웹 서버에 요청을 보내고 그러면 그 요청이 무엇이냐에 따라서  어떤 요청은 웹 서버가 직접 처리할 수 없는 요청이 있음

12. .py 확장자 파일은 니가 처리할 수 없으니 파이썬에게 처리하도록 위임해라고 설정을 변경 

13. 그 요청을 파이썬에게 요청하는데 이때 CGI 라는 기술을 이용해서 파이썬에게 위임

14. 코드에 따라서 웹 페이지를 프로그래밍 쪽으로 생성해서 서버에 보내줌 

15. 정리하자면 위임받은 파이썬이 파일을 읽어서 CGI 기술을 통해서 웹 서버에 응답해주면 

16. 웹 서버는 그 정보를 웹 브라우저에게 보내게 되는 것임

17. 과정이 어렵긴하지만 index.py 안에 코드를 바꾸면 1억개의 웹 페이지, 앞으로 미래의 만들어질 모든 웹 페이지의 html 코드를 한방에 바꿀 수 있음

18. 또한 주인장만 만들 수 있었던 새 페이지를 유저가 만들 수 있음

19. 즉 우리가 파이썬과 같은 기술을 이용하면 프로그래밍 쪽으로 사용자가 전송한 정보를 받아서 컨텐츠를 사용자에게 ht docs 디렉토리를 수정하게 하지 않고도 

20. 사용자가 만들 수 있게 된다는 것임

--------------------------------------------------------------------------------------------------------------------------

실습 환경 구축 

1. 아파치 웹 서버를 사용할 것임 

2. 파이썬이 필요

3. 웹 서버와 파이썬을 서로 연동해서 웹 서버로 들어온 정보를 파이썬이 동작해 프로그래밍적으로 

4. HTML을 생성해서 웹 서버를 통해 응답하는 애플리케이션을 구현해 볼 것

5. 웹 서버를 설치 후에 사용할 에디터와 연동 

6. 에디터에서 apache2 -> htdocs를 선택 

7. 이 디렉토리는 웹 브라우저를 통해 사용자가 서버에 접속했을때 

8. 웹 서버가 사용자가 요청한 파일을 찾는 최상위 디렉토리가 "htdocs" 이며 "다큐먼트 루트" 문서 최상위 디렉토리라고 부름

9. 파이썬을 설치하고 cmd창을 킴 

10. 컴퓨터를 동작하는 방법엔 두 가지가 있음 

11. 첫번째는 마우스를 움직여서 무언가를 클릭하고 기다리는 그래픽적인 방식 "그래픽 유저 인터페이스", "GUI" 라고 부름

12. 두번째는 cmd를 이용해서 터미널 창을 띄우면  C:\Users\uu> 기본 커맨드가 뜨는데 

13. C 드라이브 하위 사용자 하위 uu 디렉토리에 위치하고 있다는 뜻임

14. rm, mk 등의 커맨드를 입력해 컴퓨터를 제어하는 방식 "커맨드 라인 인터페이스", "CLI"라고 부름

15. 현재 우리는 CLI를 통해서 제어하는 방법을 살펴보고자 함

16. 파이썬이라고 입력하고 엔터를 치면 

	Python 3.9.9 (tags/v3.9.9:ccb0e6a, Nov 15 2021, 18:08:50) [MSC v.1929 64 bit (AMD64)] on win32
	Type "help", "copyright", "credits" or "license" for more information.
	>>>

17. 파이썬 버전과 꺽쇠 3개가 표시됨, 1 + 1을 작성하면 1 더하기 1이 뭐야라고 물어본 것임

18. 파이썬 문법에 따라서 엔터를 치면 파이썬이 우리한테 1 더하기 1은 2라고 알려줌

19. 질문하고 대답하고 서로 대화 하듯이 명령을 주고 받는 이러한 방식을 "상호 작용 한다", "인터렉티브 쉘" 방식이라고 부름

20. 빠져나가기 위해서는 exit 괄호를 진행하면 됨

21. 파이썬을 이용한 작업을 진행하다보면 반복되는 주기성을 가지고 일어나는 작업들이 있을 수 있음

22. 한번씩 저렇게 대화 하듯이 하나하나 입력하는 것은 너무 귀찮은 일임

23. 주기성 있는 일들은 어떤 파일을 만들어서 그 파일에다가 적어 놓으면 됨

24. 그 파일을 실행하기위해서는 작성한 .py가 위치한 해당 디렉토리로 변경해야함 htdocs

25. 이 상태에서 helloworld.py라는 파일을 실행 시키고 싶을때는 python helloworld.py라고 치면 

26. "파이썬 인터프리터" 라고 하는 프로그램이 helloworld.py라는 파일을 열어서 거기에 적혀있는 코드를 보고

27. 그 코드에 따라서 동작하게 됨

28. helloworld.py라는 파일 안에 우리가 원하는 프로그램이 들어가 있는 것임

29. 이 맥락에서 helloworld.py라고 하는 저 파일을 뭐라고 부르냐면 

30. "순서대로 명령이 실행된다" 라는 데서 "프로그램", 파이썬이 갖고 있는 기능 예를 들면 더하기, 나누기, 프린트 이런 기능을 응용한다고해서 "애플리케이션"이라고 부름

31. 프로그램과 애플리케이션은 둘다 같은 것을 가리키는데 

32. 순서 측면에서는 프로그램, 파이썬에 기반되는 시스템을 응용한다는 뜻에서 애플리케이션이란 말을 사용함

33. 앞에 python을 붙이지 않고도 운영체제는 .py 확장자를 보고 파일을 실행시켜줌

--------------------------------------------------------------------------------------------------------------------------

apache와 python CGI로 연동하기

1. 127.0.0.1/helloworld.py를 검색했을때 코드가 그대로 출력하는 것이 아닌 파이썬이 실행되어서 실행된 결과를 출력하게 해보려고 하는 것임 

2. 이것이 가능해지면 우리는 많은 것을 알 수 있음, 예를 들면 HTML은 그냥 한번 화면에 이렇게 만들어진 걸로 끝이지만 

3. 파이썬은 프로그래밍 언어 이기 때문에 파이썬을 통해서 계산된 결과를 출력할 수도 있고 사용자가 요청을 할 때마다 현재 시간을 출력해줄 수도 있고 

4. 가장 중요한 파이썬을 이용해 프로그래밍 쪽에서 HTML 코드를 생성해서 우리가 HTML 코드를 생성하는 것이 아니라 파이썬에게 그것을 시킬 수 있음 

5. 웹서버 안쪽에서 파이썬이 동작하도록 해보자 

6. 이 작업을 하기 위해서는 우리가 아파치 웹 서버의 설정을 바꿔서 확장자가 .py인 요청에 들어오게 되면 파이썬 인터프리터를 통해서 helloworld.py를 실행시킨 다음

7. 결과값이 출력되면 성공적으로 작업이 끝난 것임 

8. 이 작업은 웹 서버의 설정을 바꿔야 되는데 웹 서버의 설정을 바꾸는 것이 대단히 민감하고 또 하는 과정에서 여러가지 변수들이 생김 

9. 에디터 파일 목록에 Bitnami를 하나 추가함

10. conf -> httpd.conf 파일이 하나 있음

11. 열어서 mod_cgi라고 검색해보면 mod_cgi.so가 있는데 # 샾이 붙어 있지 않아야함 

12. # 샾은 실행시키지 않는 것을 나타냄

13. 우리의 목적을 다시 상기하자면 "아파치 웹 서버와 파이썬을 서로 연동되게 하려고하는 것임"

14. 이렇게 웹 서버와 애플리케이션을 연동할 때 사용하는 표준화된 방법을 cgi "Common Gateway Interface" 라고함 

15. 그것을 가능하게 해주는 아파치 웹 서버의 기능이 이것임 

16. # 샾이 없어야 켜지고 이것을 첫번째로 확인하고 

17. 우리의 다큐먼트 루트는 htdocs 이 디렉토리에 대한 설정을 찾아야함

	DocumentRoot "C:/Bitnami/apache2/htdocs"
	<Directory "C:/Bitnami/apache2/htdocs"> ~ </Directory>

18. 다큐먼트 루트라는 이 경로에 해당하는 저 디렉토리를 웹 서버가 

19. 사용자가 helloworld.py 라는 요청을 했을때 

20. htdocs에서 파일을 찾으라고 하는 뜻이 바로 위에 설정임

21. 다큐먼트 루트를 지정하는 것이고 저걸 바꾸면 다른 곳에 HTML 파일을 놓을 수 있음

22. 디렉토리라고 하는 것은 바로 이 다큐먼트 루트 해당되는 디렉토리를 웹 서버가 어떻게 다룰 것인가 설정이 적혀있음 

23. 작업을 하기 전에 httpd.conf 라는 파일을 백업해두면 좋음 

24. </Directory> 태그 안에다가 <Files "*.py"> Options ExecCGI 

25. .py라는 확장자를 가진 파일을 CGI라고 하는 방식으로 실행시킬 것이다라는 뜻임

26. AddHandler cgi-script .py 확장자가 .py인 파일은 CGI로 실행된다는 뜻임

	<Files "*.py">
        	Options ExecCGI
        	AddHandler cgi-script .py
    	</Files>

27. 서버를 재실행하면 Internal Server Error가 뜨는데 지극히 정상적인 반응임 

28. 웹 서버랑 연동해서 파이썬 코드를 작성하기 시작할 것인데 그 때 이런식으로 에러가 발생했을때 도대체 뭐가 문제인지 

29. 확인하는 가장 좋은 방법은 "에러 로그" 라는 것을 확인하는 것임

30. 아파치 웹서버는 동작하는 과정에서 어떤 오류가 있을 때 어떤 파일에다가 적어놓음.

31. apache 하위에 보면 logs라는 하위 디렉토리가 있음  

32. error 로그 속 내용을 모두 지우고 재접속하면 

33. 에러 메시지가 최신화됨

34. 읽어보면 helloworld.py 실행가능하지 않으며 # 또는 !를 맨앞 줄에 추가하라고 되어 있음

35. helloworld.py 상단에 #!python이라고 써야함 

36. window가 아닌 다른 운영체제에서는 .py 확장자를 보는게 아닌 helloworld.py의 첫번째 줄에 #!라는 약속된 특수한 기호뒤에 적인 것을 읽음

37. python이라고 적혀있다면 파이썬 문법에 맞게 실행시킴

38. PHP 같은게 적혀있다면 해당 언어에 따른 문법으로 코드를 실행함 

