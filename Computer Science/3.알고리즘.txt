이전 시간 까지 우리는 숫자, 글자, 색깔, 영상등의 입력을 나타내는 법을 배웠음
이번 시간에는 출력에 대해서 이야기 해보자



입력으로부터 출력을 어떻게 얻을 수 있을까?
그게 바로 블랙박스라는 곳에서 일아니는 일임 
input -> black box -> output



블랙박스에 컴퓨터 과학이 사용되는 곳임
"알고리즘"
문제를 해결하는 단계적 방법이라고 정의할 수 있음



그럼 우리가 원하는 문제를 풀기 위해서 어떤 알고리즘을 사용해야 할까?
단순하게 접근해보자면 전화번호부에 내가 찾는 사람의 이름이 있는지 찾아보는 것임
알파벳순으로 단계적으로 접근하는 방법 그 자체가 알고리즘임



Smith라는 사람을 찾기위해 한 장씩 전화번호부를 뒤지는 알고리즘은 매우 느리고 매우 멍청한 방법임 
속도를 2배로 늘려 두 장씩 넘기면 어떨까? 
말 그대로 2배 더 빠름 하지만 올바르다고는 볼 수 없는점이 "그냥 지나칠 수도 있다"는 점임



하지만 치명적인 문제는 아니며 조금만 수정하면 고칠 수 있음
그냥 한 두 페이지 뒤로가서 그 실수를 고치면됨
하지만 1000쪽처럼 쪽수가 많아지면 앞뒤로 500번 이상 페이지를 넘겨야 할 것임



1024 -> 512 -> 256 -> 128 -> 64 -> 32 -> 16 -> 8 -> 4 -> 2 -> 1
1024 페이지의 전화번호부에서 불필요한 부분을 절반씩 줄여나가면 
10단계만에 Smith의 페이지를 찾을 수 있음 



500단계에서 10단계로 가능한 알고리즘을 만듦
대부분의 경우 문제 해결은 우리가 이미 가지고 있는 직관이나 생각들을
기계나 다른 사람들이 이해할 수 있는 방식으로 번역하는 것에 불과함



그럼 어떤 알고리즘이 더 좋은지는 어떻게 알 수 있을까?
총 2000페이지가 되는 전화번호부라고 하면 Smith를 찾기 위해서는 
1번 알고리즘에서는 또다시 500단계가
2번 알고리즘에서는 1단계가
추가됨을 알 수 있음



이는 "효율성" 측면에서 아주 큰 차이임 
절차적인 프로그래밍이라 하는 특정한 건설법이 모든 언어들에 존재함
"함수"는 컴퓨터에게 
사람 언어에서는 뭘 할지 알려주는 "동사"와 같음 



"조건"이라는 부분은 일종의 나뭇가지나 일종의 갈림길과 같이
여러 선택지 중 "하나를 고르는 것"임



이런 결정을 내리기 위해서는 스스로에게 물어볼 "질문"이 필요
이러한 질문은 컴퓨터 과학에서는 "불리언 표현"이라고 부름 
답이 예 또는 아니오, 참 또는 거짓으로 나오는, 0 또는 1로 나오는 질문을 뜻함 
코드에서도 0, 1이 유용한 걸 볼 수 있음



"반복"은 뭔가를 계속해서 반복하는 순환임
우리는 이러한 실제 프로그래밍 언어를 사용하는 방식을 배워갈 예정임




















