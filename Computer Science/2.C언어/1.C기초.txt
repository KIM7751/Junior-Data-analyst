C는 아주 오래되고 전통적인 순수 텍스트 기반의 언어
스크래치에서 한 모든 것들 이상을 할 수 있음
사용자 친화적인 스크래치와는 다르게 많이 딱딱하거나 암호처럼 보일 수 있음



	int main(void)
	{
		printf("hello, world");
	}



int main(void)는 스크래치의 "초록색 깃발을 클릭했을 때" 블록과 같은 역할을 함, "시작한다" 의미
앞으로 우리가 작성할 코드 모두는 이 int main (void) { }의 중괄호 사이에 작성하게 될 것



C에서는 스크래치에서의 say라는 함수가 없음, 대신에 printf라는 함수가 있음
printf("hello,world")은 스크래치의 " 'hello, world' 라고 말하기"블록과 같은 역할을 함
글자나 단어, 문장을 적을 때는 언제나 텍스트에 " " 쌍따옴표로 감싸야함
그리고 우리가 일상에서 문장의 끝에 마침표(.)를 붙이는 것 처럼 C에서는 세미콜론(;)을 붙여야함



	#include <stdio.h>
	int main(void)
	{
		printf("hello, world");
	}



C에서는 스크래치의 블록과 같은 함수를 사용하기 위해서는 
컴퓨터에게 그 함수가 어디에 구현되어 있는지 또는 어디에 저장되어 있는지 알려줘야 함
stdio.h 라는 파일이 무엇이든 함수에 접근하기 위해 그 파일을 들여다봐라라는 의미



실습에 사용할 툴은 클라우드 기반 CS50 sandbox 를 사용할 것임
스크래치와 유사한 프로그래밍 환경을 제공하지만 
스크래치 블록과 언어를 사용하지 않으며 C를 사용할 것 



프로그래밍 환경은 크게 두가지로 나뉘는데 윗부분은 실제 코드를 작성하는 부분 
새로운 파일을 만들고 코드를 작성하고 저장할 수 있음 



아래 부분은 터미널 창이라고 부르고 일종의 옛날 인터페이스인데 프롬프트에 입력하고 엔터를 치면 
코드를 실행할 수 있음, 명령어 입력 방식을 사용한다고 이야기할 수 있음



코드 작성을 마치고 프로그램을 어떻게 실행할까?
컴퓨팅 사고에서 배운 내용을 기억해보면 컴퓨터는 영어를 이해하지 못함 
C 역시 이해하지 못함 



컴퓨터가 이해하는 언어는 2진법이었음
0과 1을 사용한 코딩은 예전에 했었지만 오늘날에는 좋은 방법이 있음
위에 작성한 코드가 암호 같아 보이는 코딩이지만 C의 규칙과 문법을 배우고 나면
적어도 무슨 뜻인지 이해할 수 있음



그럼 이걸 0과 1로 컴퓨터가 이해할 수 있도록 번역해야하는데 
중간 단계가 필요함



C언어로 된 소스코드를 입력으로 받아 머신코드라고 하는 출력을 내보내는 일종의 프로그램이 필요함
소스코드는 C, Python, 자바, C++와 같이 들어본 적 있는 언어들로 작성한 영어와 유사한 코드임



머신코드는 컴퓨터가 실제로 이해하는 0과 1의 조합임
소스코드로부터 머신코드를 얻기 위해서는 이러한 번역을 수행하는 알고리즘 혹은 소프트웨어가 필요함 
이를 우리는 "컴파일러"라고 부름



소스코드(source code) -> 컴파일러(compiler) -> 머신코드(machine code)
그럼 그건 어떻게 해야할까?



터미널 창을 보면 $표시가 있는데 뭔가를 작성하라는 의미임
"프롬프트" 혹은 "쉘" 이라고 함
clang은 코드를 컴파일하는 프로그램의 이름임
어떤 사람들이 이걸 만들었고 모두가 무료로 다운받을 수 있도록 했음



clang(C + language)을 사용해서 소스코드를 머신코드로 번역할 수 있음

	clang hello.c

엔터를 누르는 순간 뭔가 새로운게 생김



a.out이라는 파일이 생겼지만 우리는 뭐가 들어있는지 짐작이 가능함
소스코드를 번역한 머신코드가 들어있을 것



C 입력 소스코드를 컴파일러에 넣어 0과 1로 이루어진 머신코드로 a.out이라는 파일안에 저장한 것

	./a.out

컴퓨터가 현재 디렉토리에 있는 a.out이라는 프로그램을 실행하도록 함



.은 말 그대로 현재 폴더를 의미
실행을 시켜보면 hello,world$ 출력이 보이는데 
$는 프롬프트를 의미하고 다음 입력을 기다리고 있음



사용자 친화적인 스크래치와 달리 C를 비롯한 많은 언어들은 
시키는 일만 하기 때문임
커서를 다음 줄로 옮기라고 말하지 않았기 때문임



printf("hello, world\n")
옛날 사람들은 간단한 규칙을 정함
\n이 컴퓨터로 하여금 줄을 바꾸는걸 의미하도록 



수정하고 ./a.out을 실행하면 결과값이 hello,world$으로 똑같은데
이는 수정된 내용을 컴파일하지 않았기 때문임 
컴퓨터는 정말 말 그대로 시킨 일만 하기때문에 수정한 뒤에서 컴파일을 해야함



컴파일 후 나오는 머신코드의 이름을 지정하고 싶을땐 clang -o hello hello.c 라고 입력하면 
기존의 a.out이 아닌 hello라는 머신코드 파일이 생성됨



$ ls list 약어로 현재 폴더나 디렉토리에 있는 파일의 리스트를 보여줌

	a.out* hello* hello.c

*은 무슨 뜻일까?



실행 가능하다는 뜻으로 컴퓨터가 이해할 수 있는 머신코드라는 뜻임
소스코드와 머신코드의 구분이 가능함



$ rm remove 약어로 파일을 지우는 명령어임
$ rm a.out을 통해 해당 파일을 지울 수 있음